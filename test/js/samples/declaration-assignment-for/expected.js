/* generated by Svelte vX.Y.Z */
import {
	SvelteComponent,
	append,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from "svelte/internal";

function create_fragment(ctx) {
	var h1, t0, t1, t2;

	return {
		c() {
			h1 = element("h1");
			t0 = text(ctx.foo1);
			t1 = space();
			t2 = text(ctx.foo2);
		},

		m(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			append(h1, t1);
			append(h1, t2);
		},

		p(changed, ctx) {
			if (changed.foo1) {
				set_data(t0, ctx.foo1);
			}
		},

		i: noop,
		o: noop,

		d(detaching) {
			if (detaching) {
				detach(h1);
			}
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let foo1;
  let foo2;
  for (let bar = (foo1 = 0); bar < 5; bar += 1) {
    $$invalidate('foo1', foo1 = foo2); $$invalidate('foo1', foo1);
  }

	return { foo1, foo2 };
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}
}

export default Component;
