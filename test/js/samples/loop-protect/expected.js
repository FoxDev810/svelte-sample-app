/* generated by Svelte vX.Y.Z */
import {
	SvelteComponentDev,
	dispatch_dev,
	init,
	loop_guard,
	noop,
	safe_not_equal
} from "svelte/internal";

const file = undefined;

function create_fragment(ctx) {
	const block = {
		c: noop,
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self) {
	const guard = loop_guard(100);

	while (true) {
		foo();
		guard();
	}

	const guard_1 = loop_guard(100);

	for (; ; ) {
		foo();
		guard_1();
	}

	const guard_2 = loop_guard(100);

	while (true) {
		foo();
		guard_2();
	}

	const guard_4 = loop_guard(100);

	do {
		foo();
		guard_4();
	} while (true);

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		
	};

	$: {
		const guard_3 = loop_guard(100);

		while (true) {
			foo();
			guard_3();
		}
	}

	$: {
		const guard_5 = loop_guard(100);

		do {
			foo();
			guard_5();
		} while (true);
	}

	return [];
}

class Component extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Component",
			options,
			id: create_fragment.name
		});
	}
}

export default Component;