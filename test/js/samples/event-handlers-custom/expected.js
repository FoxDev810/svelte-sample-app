/* generated by Svelte vX.Y.Z */
import { appendNode, assign, createElement, createText, detachNode, init, insertNode, noop, proto } from "svelte/shared.js";


export default (function() {

var template = (function() {
	return {
		methods: {
			foo ( bar ) {
				console.log( bar );
			}
		},
		events: {
			foo ( node, callback ) {
				// code goes here
			}
		}
	};
}());

function create_main_fragment(state, component) {
	var button, foo_handler, text;

	return {
		create: function() {
			button = createElement("button");
			text = createText("foo");
			this.hydrate();
		},

		hydrate: function(nodes) {
			foo_handler = template.events.foo.call(component, button, function(event) {
				var state = component.get();
				component.foo( state.bar );
			});
		},

		mount: function(target, anchor) {
			insertNode(button, target, anchor);
			appendNode(text, button);
		},

		update: noop,

		unmount: function() {
			detachNode(button);
		},

		destroy: function() {
			foo_handler.teardown();
		}
	};
}

function SvelteComponent(options) {
	init(this, options);
	this._state = options.data || {};

	this._fragment = create_main_fragment(this._state, this);

	if (options.target) {
		this._fragment.create();
		this._fragment.mount(options.target, options.anchor || null);
	}
}

assign(SvelteComponent.prototype, template.methods, proto);

return SvelteComponent;
}());