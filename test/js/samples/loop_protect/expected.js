/* generated by Svelte vX.Y.Z */
import {
	SvelteComponentDev,
	dispatch_dev,
	init,
	noop,
	safe_not_equal
} from "svelte/internal";

const file = undefined;

function create_fragment(ctx) {
	const block = {
		c: noop,
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self) {
	const LP = Date.now();

	while (true) {
		foo();

		if (Date.now() - LP > 100) {
			throw new Error("Infinite loop detected");
		}
	}

	const LP_1 = Date.now();

	for (; ; ) {
		foo();

		if (Date.now() - LP_1 > 100) {
			throw new Error("Infinite loop detected");
		}
	}

	const LP_2 = Date.now();

	while (true) {
		foo();

		if (Date.now() - LP_2 > 100) {
			throw new Error("Infinite loop detected");
		}
	}

	const LP_4 = Date.now();

	do {
		foo();

		if (Date.now() - LP_4 > 100) {
			throw new Error("Infinite loop detected");
		}
	} while (true);

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		
	};

	$: {
		const LP_3 = Date.now();

		while (true) {
			foo();

			if (Date.now() - LP_3 > 100) {
				throw new Error("Infinite loop detected");
			}
		}
	}

	$: {
		const LP_5 = Date.now();

		do {
			foo();

			if (Date.now() - LP_5 > 100) {
				throw new Error("Infinite loop detected");
			}
		} while (true);
	}

	return {};
}

class Component extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Component",
			options,
			id: create_fragment.name
		});
	}
}

export default Component;